# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function create_agent_read(handler)
    function create_agent_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["Agent"] = OpenAPI.Servers.to_param_type(Agent, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_agent_validate(handler)
    function create_agent_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_agent_invoke(impl; post_invoke=nothing)
    function create_agent_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_agent(req::HTTP.Request, openapi_params["Agent"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_agents_read(handler)
    function list_agents_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_agents_validate(handler)
    function list_agents_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function list_agents_invoke(impl; post_invoke=nothing)
    function list_agents_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_agents(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerDefaultApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/agents", OpenAPI.Servers.middleware(impl, create_agent_read, create_agent_validate, create_agent_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/agents", OpenAPI.Servers.middleware(impl, list_agents_read, list_agents_validate, list_agents_invoke; optional_middlewares...))
    return router
end
